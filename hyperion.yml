version: "3.3"

networks:
  hyperion-net:
    driver: overlay
    attachable: true
    external:
      name: hyperion-net

volumes:
    prometheus: {}
    grafana: {}
    alertmanager: {}
    discovery: {}

services:
  cadvisor:
    image: google/cadvisor
    networks:
      - hyperion-net
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.10'
          memory: 128M
        reservations:
          cpus: '0.10'
          memory: 64M

  karma:
    image: lmierzwa/karma
    networks:
      - hyperion-net
    environment:
      - ALERTMANAGER_URI=http://alertmanager:9093
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.port=8080
        - traefik.docker.network=hyperion-net
        - traefik.backend=karma
        - traefik.frontend.rule=PathPrefixStrip:/karma/
        - traefik.frontend.auth.basic=${ADMIN_AUTH:-admin:$2y$05$gMFUgee1JAwtvxw22rWoHOPDm42wxkz56oTI8UkmDVH6lcuR/CmWy}
      resources:
        limits:
          cpus: '0.10'
          memory: 128M
        reservations:
          cpus: '0.10'
          memory: 64M

  grafana:
    image: kunaldawn/hyperion-grafana
    networks:
      - hyperion-net
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/grafana/
    volumes:
      - grafana:/var/lib/grafana
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - traefik.enable=true
        - traefik.port=3000
        - traefik.docker.network=hyperion-net
        - traefik.backend=grafana
        - traefik.backend.loadbalancer.sticky=true
        - traefik.frontend.rule=PathPrefixStrip:/grafana/
 
  alertmanager:
    image: kunaldawn/hyperion-alertmanager
    networks:
      - hyperion-net
    environment:
      - SLACK_URL=${SLACK_URL:-https://hooks.slack.com/services/TOKEN}
      - SLACK_CHANNEL=${SLACK_CHANNEL:-hyperion}
      - SLACK_USER=${SLACK_USER:-hyperion}
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager:/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - traefik.enable=true
        - traefik.port=9093
        - traefik.docker.network=hyperion-net
        - traefik.backend=alertmanager
        - traefik.frontend.rule=PathPrefixStrip:/alertmanager/
        - traefik.frontend.auth.basic=${ADMIN_AUTH:-admin:$2y$05$gMFUgee1JAwtvxw22rWoHOPDm42wxkz56oTI8UkmDVH6lcuR/CmWy}

  docker-exporter:
    image: kunaldawn/hyperion-docker-exporter
    networks:
       - hyperion-net
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.05'
          memory: 6M
        reservations:
          cpus: '0.05'
          memory: 4M

  metric-discovery:
    image: kunaldawn/hyperion-metric-discovery
    networks:
       - hyperion-net
    environment:
      - HYPERION_DISCOVERY_SERVICE_NAME=hyperion-prometheus
      - HYPERION_DISCOVERY_SERVICE_PATH=/etc/hyperion/discovery/providor.json
      - HYPERION_DISCOVERY_SERVICE_REFRESH=${METRIC_DISCOVERY_REFRESH:-30}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - discovery:/etc/hyperion/discovery
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '0.05'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

  node-exporter:
    image: kunaldawn/hyperion-node-exporter
    networks:
      - hyperion-net
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.10'
          memory: 128M
        reservations:
          cpus: '0.10'
          memory: 64M

  prometheus:
    image: kunaldawn/hyperion-prometheus
    networks:
      - hyperion-net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=${PROMETHEUS_RETENTION:-7d}'
      - '--web.external-url=/prometheus/'
      - '--web.route-prefix=/'
    volumes:
      - prometheus:/prometheus
      - discovery:/etc/hyperion/discovery
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '0.20'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 64M
      labels:
        - traefik.enable=true
        - traefik.port=9090
        - traefik.docker.network=hyperion-net
        - traefik.backend=prometheus
        - traefik.frontend.rule=PathPrefixStrip:/prometheus/
        - traefik.frontend.auth.basic=${ADMIN_AUTH:-admin:$2y$05$gMFUgee1JAwtvxw22rWoHOPDm42wxkz56oTI8UkmDVH6lcuR/CmWy}
